<?php

if( ! isset( $_SESSION ) ):
  session_start();
endif;
$_SESSION['MICROTIME'] =  microtime( true ) ;
require_once ('config.php');
?>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html" charset="utf-8"/>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
<meta name="description" content="">
<meta name="author" content="YDm">
<link rel="icon" href="favicon.ico">
<title><?php echo $SiteName;?></title>
<link href="https://fonts.googleapis.com/css2?family=Lato:ital,wght@1,700&display=swap" rel="stylesheet">
<link rel="stylesheet" href="css/index.css">
<link rel="stylesheet" href="bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">

<script src="jquery/jquery-3.5.1.min.js"></script>
<!-- 
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
-->

<script src="bootstrap/4.0.0/js/bootstrap.min.js"></script>
<script src="babylonjs/babylon.js"></script>
<script src="babylonjs/babylon.gui.min.js"></script>
<script src="babylonjs/babylonjs.loaders.min.js"></script>
</head>
<body onload="resizeCanvas();">
<!-- NavBar start -->
<nav class="navbar navbar-expand-md navbar-dark fixed-top bg-dark">
	<a class="navbar-brand" href="#"><?php echo $SiteName;?></a>
	<button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarsExampleDefault" aria-controls="navbarsExampleDefault" aria-expanded="false" aria-label="Toggle navigation">
	<span class="navbar-toggler-icon"></span>
	</button>
	<div class="collapse navbar-collapse" id="navbarsExampleDefault">
	<ul class="navbar-nav mr-auto">
		<li class="nav-item active">
		<a class="nav-link" href="#">Home <span class="sr-only">(current)</span></a>
		</li>
		<li class="nav-item">
		<a class="nav-link" href="#">Link</a>
		</li>
		<li class="nav-item">
		<a class="nav-link disabled" href="#">Disabled</a>
		</li>
		<li class="nav-item dropdown">
		<a class="nav-link dropdown-toggle" href="http://example.com" id="dropdown01" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">Dropdown</a>
		<div class="dropdown-menu" aria-labelledby="dropdown01">
		<a class="dropdown-item" href="#">Action</a>
		<a class="dropdown-item" href="#">Another action</a>
		<a class="dropdown-item" href="#">Something else here</a>
		</div>
		</li>
	</ul>
	<form class="form-inline my-2 my-lg-0">
		<input class="form-control mr-sm-2" type="text" placeholder="Search" aria-label="Search">
		<button class="btn btn-outline-success my-2 my-sm-0" type="submit">Search</button>
	</form>
	</div>
</nav>

<main role="main">
<!-- Main jumbotron for a primary marketing message or call to action -->
<div class="jumbotron">
	<div class="container">
		<h6 class="display-3"><?php echo $SiteName; ?></h6>
		<p></p>
	</div>
</div>
<!-- Main jumbotron for a primary marketing message or call to action -->

<!-- containder fluid start-->
<div class="container-fluid">

<!-- row start -->
<div class="row full-height">
<!-- left bar start -->
<div class="col-sm-1 col-md-1 col-lg-1 left_nav" name="Navigation Column">
	<ul>
	<li><a href="#?Select">Select</a></li>
		<ul>
			<li><a href="#" id="Save" onchange="Save">Save</a></li>
			<li><a href="#" id="Load" onchange="Load">Load</a></li>
		</ul>
	<li><a href="#?Modify">Modify</a></li>
	<li><a href="#?Confirm">Confirm</a></li>
	</ul>
</div>
<!-- left bar end -->

<div class="col-sm-1 col-md-9 col-lg-9 central">
	<div class="row">
		<div><h5>Base Cabinet 1 Door</h5></div>
	</div>
	<div class="row">
		<div>
    <canvas id="renderCanvas" touch-action="none"></canvas> <!-- touch-action="none" for best results from PEP -->
    <script>
        var canvas = document.getElementById("renderCanvas"); // Get the canvas element
        var engine = new BABYLON.Engine(canvas, true); // Generate the BABYLON 3D engine

        /******* Add the create scene function ******/

var createScene = function () {

    //var Door_Opened=1.5708;        //90°
    var Door_Closed=0;
    var HF_Top_Hinge=1.51844; //87°
    var HF_Bot_Hinge=1.8675; //107°
    var EdgeThk=5;
    var ArtHeight=720;
    var ArtWidth=600;
    var ArtDepth=560;
    
    // This creates a basic Babylon Scene object (non-mesh)
    var scene = new BABYLON.Scene(engine);

    // This creates and positions a free camera (non-mesh)
    //var camera = new BABYLON.FreeCamera("camera1", new BABYLON.Vector3(50, 5, 50), scene);
    var camera = new BABYLON.ArcRotateCamera("ArcRotateCamera", 0, 0, 0, new BABYLON.Vector3(0, 0, 0), scene);
    camera.setPosition(new BABYLON.Vector3(50, 50, 50));

    // This targets the camera to scene origin
    //camera.position=(new BABYLON.Vector3(50,50,50));
    //camera.setTarget(BABYLON.Vector3.Zero());
    scene.clearColor = new BABYLON.Color3(0.95, 0.95, 0.95);

    // This attaches the camera to the canvas
    camera.attachControl(canvas, true);
    camera.angularSensibility = 1000;
    //camera.moveSensibility = 1000;

    

//var Sphere = new BABYLON.Mesh.CreateSphere("Sphere",20,2,scene);
//	Sphere.material=Edge_Defalut;
//	Sphere.position.x=0;
//	Sphere.position.y=0;
//	Sphere.position.z=0;

    //HF_Top_Color
    var HF_Top_Color = new BABYLON.StandardMaterial("HF_Top_Color",scene);
    HF_Top_Color.diffuseColor = new BABYLON.Color3(0, 0, 1);


    //HF_Bot_Color
    var HF_Bot_Color = new BABYLON.StandardMaterial("HF_Bot_Color",scene);
    HF_Bot_Color.diffuseColor =  new BABYLON.Color3(1, 1, 0);

    //HF_Top_Color
        
    var Edge_Defalut = new BABYLON.StandardMaterial("Edge_Defalut",scene);
    Edge_Defalut.diffuseColor = new BABYLON.Color4(0, 1, 0, 1);

    var Edge_highlight = new BABYLON.StandardMaterial("Edge_highlight",scene);
    Edge_highlight.diffuseColor = new BABYLON.Color4(1, 0, 0, 1);


    // This creates a light, aiming 0,1,0 - to the sky (non-mesh)
    var light = new BABYLON.HemisphericLight("light", new BABYLON.Vector3(0, 1, 0), scene);

    // Default intensity is 1. Let's dim the light a small amount
    light.intensity = 1;

    var HF_Top = BABYLON.MeshBuilder.CreateBox("HF_Top",{width:20,height:12,depth:0.6},scene);
    HF_Top.material=HF_Top_Color;
    HF_Top.setPivotPoint(new BABYLON.Vector3(0,(HF_Top.getBoundingInfo().boundingBox.maximum.y),0),scene);
    HF_Top.actionManager = new BABYLON.ActionManager(scene);
    HF_Top.actionManager.isRecursive = true;

    HF_Top.edgesWidth=EdgeThk;
    HF_Top.edgesColor.copyFromFloats(1,1,1,0.8); //.set(BABYLON.Color4(Edge_Defalut)); // new BABYLON.Color4(Edge_Defalut);    console.log(Edge_Defalut);
    HF_Top.enableEdgesRendering();


    var HF_Bot = BABYLON.MeshBuilder.CreateBox("HF_Bot",{width:20,height:12,depth:0.6},scene);
    HF_Bot.material=HF_Bot_Color;
    HF_Bot.position.y = -((HF_Top.getBoundingInfo().boundingBox.maximum.y)+(HF_Bot.getBoundingInfo().boundingBox.maximum.y));
    HF_Bot.parent=HF_Top;

    HF_Bot.edgesWidth=EdgeThk;
    HF_Bot.edgesColor.copyFromFloats(1,1,1,0.8);
    HF_Bot.enableEdgesRendering();

	var greenPivotAt = new BABYLON.Vector3(0, 6, -0.3);
	HF_Bot.setPivotMatrix(BABYLON.Matrix.Translation(-greenPivotAt.x, -greenPivotAt.y, -greenPivotAt.z));



            HF_Top.actionManager.registerAction(new BABYLON.ExecuteCodeAction(
                { trigger: BABYLON.ActionManager.OnPickDownTrigger },
                function() {
                    if (HF_Top.rotation.x==0)
            {
                BABYLON.Animation.CreateAndStartAnimation("HF_Top_Open", HF_Top, "rotation.x", 30, 60, Door_Closed, -HF_Top_Hinge, BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT);
                BABYLON.Animation.CreateAndStartAnimation("HF_Bot_Open", HF_Bot, "rotation.x", 30, 60, Door_Closed, HF_Bot_Hinge, BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT);
            }
            else
            {
                BABYLON.Animation.CreateAndStartAnimation("HF_Top_Close", HF_Top, "rotation.x", 30, 60, -HF_Top_Hinge, Door_Closed, BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT);
                BABYLON.Animation.CreateAndStartAnimation("HF_Bot_Close", HF_Bot, "rotation.x", 30, 60, HF_Bot_Hinge, Door_Closed, BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT);
            }
                }));


            HF_Top.actionManager.registerAction(new BABYLON.ExecuteCodeAction(
                { trigger: BABYLON.ActionManager.OnPointerOverTrigger },
                function()
                    {
                    HF_Top.edgesColor.copyFromFloats(1,0,0,0.5);
                    HF_Bot.edgesColor.copyFromFloats(1,0,0,0.5);

                    //HF_Top.edgesWidth=EdgeThk;
                    //HF_Bot.edgesWidth=HF_Top.edgesWidth;
                    //HF_Top.edgesColor=new BABYLON.Color4(Edge_highlight);
                    //HF_Bot.edgesColor=HF_Top.edgesColor;
                    //HF_Top.enableEdgesRendering();
                    //HF_Bot.enableEdgesRendering();
                    }
         
         ));


            HF_Top.actionManager.registerAction(new BABYLON.ExecuteCodeAction(
                { trigger: BABYLON.ActionManager.OnPointerOutTrigger },
                function()
                    {
                    HF_Top.edgesColor.copyFromFloats(1,1,1,0.8);
                    HF_Bot.edgesColor.copyFromFloats(1,1,1,0.8);

                    //HF_Top.edgesWidth=0;
                    //HF_Bot.edgesWidth=HF_Top.edgesWidth;
                    //HF_Top.edgesColor=new BABYLON.Color4(Edge_Defalut);
                    //HF_Top.enableEdgesRendering();
                    //HF_Bot.edgesColor=HF_Top.edgesColor;
                    //HF_Top.disableEdgesRendering();
                    //HF_Bot.disableEdgesRendering();
                    }
         
         ));


scene.onKeyboardObservable.add((kbInfo) => {
		switch (kbInfo.type) {
			case BABYLON.KeyboardEventTypes.KEYDOWN:
				switch (kbInfo.event.key) {
                    case "a":
                    case "A":
                        HF_Top.scaling.x -= 0.1;
                        //var serializedJson = JSON.stringify(BABYLON.serialize(scene));
                        var serializedJson = JSON.stringify(BABYLON.serialize(HF_Top));
                        console.log(serializedJson);
                    break
                    case "d":
                    case "D":
                        HF_Top.scaling.x += 0.1;
                    break
                    case "w":
                    case "W":
                        HF_Top.scaling.y += 0.1;
                    break
                    case "s":
                    case "S":
                        HF_Top.scaling.y -= 0.1;
                    break
                }
			break;
		}
	});


////
    var makeTextPlane = function(text, color, size) {
    	var dynamicTexture = new BABYLON.DynamicTexture("DynamicTexture", 50, scene, true);
    	dynamicTexture.hasAlpha = true;
    	dynamicTexture.drawText(text, 5, 40, "bold 36px Arial", color , "transparent", true);
    	var plane = new BABYLON.Mesh.CreatePlane("TextPlane", size, scene, true);
    	plane.material = new BABYLON.StandardMaterial("TextPlaneMaterial", scene);
    	plane.material.backFaceCulling = false;
    	plane.material.specularColor = new BABYLON.Color3(0, 0, 0);
    	plane.material.diffuseTexture = dynamicTexture;
    	return plane;
    };

// show axis
  	var showAxis = function(size) {

  
    	var axisX = BABYLON.Mesh.CreateLines("axisX", [ 
      		new BABYLON.Vector3.Zero(), new BABYLON.Vector3(size, 0, 0), new BABYLON.Vector3(size * 0.95, 0.05 * size, 0), 
      		new BABYLON.Vector3(size, 0, 0), new BABYLON.Vector3(size * 0.95, -0.05 * size, 0)
      	], scene);
    	axisX.color = new BABYLON.Color3(1, 0, 0);
    	var xChar = makeTextPlane("X", "red", size / 10);
    	xChar.position = new BABYLON.Vector3(0.9 * size, -0.05 * size, 0);
    	var axisY = BABYLON.Mesh.CreateLines("axisY", [
        	new BABYLON.Vector3.Zero(), new BABYLON.Vector3(0, size, 0), new BABYLON.Vector3( -0.05 * size, size * 0.95, 0), 
        	new BABYLON.Vector3(0, size, 0), new BABYLON.Vector3( 0.05 * size, size * 0.95, 0)
        ], scene);
    	axisY.color = new BABYLON.Color3(0, 1, 0);
    	var yChar = makeTextPlane("Y", "green", size / 10);
    	yChar.position = new BABYLON.Vector3(0, 0.9 * size, -0.05 * size);
    	var axisZ = BABYLON.Mesh.CreateLines("axisZ", [
        	new BABYLON.Vector3.Zero(), new BABYLON.Vector3(0, 0, size), new BABYLON.Vector3( 0 , -0.05 * size, size * 0.95),
        	new BABYLON.Vector3(0, 0, size), new BABYLON.Vector3( 0, 0.05 * size, size * 0.95)
        ], scene);
    	axisZ.color = new BABYLON.Color3(0, 0, 1);
    	var zChar = makeTextPlane("Z", "blue", size / 10);
    	zChar.position = new BABYLON.Vector3(0, 0.05 * size, 0.9 * size);
	};
	
	// showAxis(20);

  
    return scene;

};



        /******* End of the create scene function ******/

        var scene = createScene(); //Call the createScene function

        // Register a render loop to repeatedly render the scene
        engine.runRenderLoop(function () {
                scene.render();

$('#Save').click(function(){
//console.log(HF_Top.getBoundingInfo().boundingBox.maximumWorld);
console.log("Save");



	var serializedScene = BABYLON.SceneSerializer.Serialize(scene);
	var strScene = JSON.stringify(serializedScene);
	
	// here is the serialized scene
	console.log(strScene);
	
	if (confirm('Do you want to download that scene?')) {
		doDownload('scene', scene);
	} else {
	    // Do nothing!
	}



var serializedJson = JSON.stringify(BABYLON.sceneserializer.Serialize(scene));
});


$('#Load').click(function(){
//console.log(HF_Top.getBoundingInfo().boundingBox.maximumWorld);
console.log("Load");
//var serializedJson = JSON.stringify(BABYLON.sceneserializer.Serialize(scene));
});


        });


var objectUrl;
function doDownload(filename, scene) {
    if(objectUrl) {
        window.URL.revokeObjectURL(objectUrl);
    }
    
    var serializedScene = BABYLON.SceneSerializer.Serialize(scene);
        
    var strMesh = JSON.stringify(serializedScene);
    
    if (filename.toLowerCase().lastIndexOf(".babylon") !== filename.length - 8 || filename.length < 9){
        filename += ".babylon";
    }
            
	var blob = new Blob ( [ strMesh ], { type : "octet/stream" } );
       
    // turn blob into an object URL; saved as a member, so can be cleaned out later
    objectUrl = (window.webkitURL || window.URL).createObjectURL(blob);
   
    var link = window.document.createElement('a');
    link.href = objectUrl;
    link.download = filename;
    var click = document.createEvent("MouseEvents");
    click.initEvent("click", true, false);
    link.dispatchEvent(click);          
}




function resizeCanvas() {
    var canvs = document.getElementById("renderCanvas");
    canvs.width = window.innerWidth;
    canvs.height = window.innerHeight;
}

    </script>



</div>
	</div>
</div>



<div class="col-sm-1 col-md-2 col-lg-2 inspect" id="inspector">
<script>
scene.debugLayer.show({
    overlay:false, 
    globalRoot:document.getElementById('inspector')
});
</script>



</div> <!--- add d-none to class for hiding -->

<?php
$json = '{"a":1,"b":2,"c":3,"d":4,"e":5}';

$debug=var_dump(json_decode($json));
//var_dump(json_decode($json, true));

?>

</div>
<!-- row start -->
</div>
<!-- containder fluid end-->
<!-- footer start -->
</main>
<footer class="container">
<p>&copy; Company name <?php echo date("Y");?></p>
<div class="debug-console"><?php echo $debug;?></div>
<!-- footer end -->
<div>
</div>
</footer>




<!-- NavBar end -->	

</body>
</html>

