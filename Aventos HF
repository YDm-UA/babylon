//https://playground.babylonjs.com/#DWXJJ3
var createScene = function () {

    var Door_Opened=1.5708;        //90°
    var Door_Closed=0;
    var HF_Top_Hinge=1.51844; //87°
    var HF_Bot_Hinge=1.8675; //107°
    // This creates a basic Babylon Scene object (non-mesh)
    var scene = new BABYLON.Scene(engine);

    // This creates and positions a free camera (non-mesh)
    var camera = new BABYLON.FreeCamera("camera1", new BABYLON.Vector3(50, 5, 50), scene);

    // This targets the camera to scene origin
    camera.position=(new BABYLON.Vector3(50,50,50));
    camera.setTarget(BABYLON.Vector3.Zero());
    scene.clearColor = new BABYLON.Color3(0.95, 0.95, 0.95);

    // This attaches the camera to the canvas
    camera.attachControl(canvas, true);
    //camera.angularSensibility = 1000;
    //camera.moveSensibility = 1000;

    //HF_Top_Color
    var HF_Top_Color = new BABYLON.StandardMaterial("HF_Top_Color",scene);
    HF_Top_Color.diffuseColor = new BABYLON.Color3(1, 1, 0);


    //HF_Bot_Color
    var HF_Bot_Color = new BABYLON.StandardMaterial("HF_Bot_Color",scene);
    //HF_Bot_Color.emissiveColor = new BABYLON.Color3(0,1,1);
    HF_Bot_Color.diffuseColor =  new BABYLON.Color3(0.4,0.8,0.8);


    // This creates a light, aiming 0,1,0 - to the sky (non-mesh)
    var light = new BABYLON.HemisphericLight("light", new BABYLON.Vector3(0, 1, 0), scene);

    // Default intensity is 1. Let's dim the light a small amount
    light.intensity = 0.7;

    // Our built-in 'sphere' shape.1
    var SphereT = BABYLON.MeshBuilder.CreateSphere("sphere", {diameter: 1.5, segments: 16}, scene);
    var SphereB = BABYLON.MeshBuilder.CreateSphere("sphere", {diameter: 1.5, segments: 16}, scene);
    //var SphereC = BABYLON.MeshBuilder.CreateSphere("sphere", {diameter: 1.5, segments: 16}, scene);

    var HF_Top = BABYLON.MeshBuilder.CreateBox("HF_Top",{width:20,height:12,depth:0.6},scene);
    HF_Top.material=HF_Top_Color;
    HF_Top.setPivotPoint(new BABYLON.Vector3(0,(HF_Top.getBoundingInfo().boundingBox.maximum.y),0),scene);
    HF_Top.actionManager = new BABYLON.ActionManager(scene);
    HF_Top.actionManager.isRecursive = true;

    // Move the sphere upward 1/2 its height
    SphereT.position.y = -(HF_Top.getBoundingInfo().boundingBox.maximum.y);
    SphereT.parent=HF_Top;
    SphereT.material=HF_Top_Color;
//    SphereT.addChild=HF_Bot;
   
    //SphereB.position.x=6;
    //SphereB.position.y=SphereT.position.y+6;
    //SphereB.position=SphereT.position;
    //SphereB.parent=SphereT;
    //SphereB.position.y+=6;
    //SphereB.material=HF_Bot_Color;
    

    var HF_Bot = BABYLON.MeshBuilder.CreateBox("HF_Bot",{width:20,height:12,depth:0.6},scene);
    HF_Bot.material=HF_Bot_Color;
    HF_Bot.position.y=-6;
	HF_Bot.parent=SphereT;
	var greenPivotAt = new BABYLON.Vector3(0, 6, 0);
	HF_Bot.setPivotMatrix(BABYLON.Matrix.Translation(-greenPivotAt.x, -greenPivotAt.y, -greenPivotAt.z));
	
    //HF_Bot.setPositionWithLocalVector(0,HF_Bot.position.y=-6,0);
    //HF_Bot.setPivotPoint(SphereT.getPivotPoint());
    





    //HF_Bot.setPivotPoint(new BABYLON.Vector3(0,(-HF_Bot.getBoundingInfo().boundingBox.maximum.y),0),scene);
    //let pivotMatrix = BABYLON.Matrix.Translation(100,0,0);
    //HF_Bot.setPivotMatrix(pivotMatrix);
    //let preTransformMatrix = BABYLON.Matrix.Translation( 0, 0, 0);
    //HF_Bot.setPreTransformMatrix(preTransformMatrix);


    scene.onPointerPick = function (evt, pickInfo) {
        if (pickInfo.hit) {
            if (pickInfo.pickedMesh != null)
            {
                console.log(pickInfo.pickedMesh.name);
                //console.log("x="+pickInfo.pickedMesh.getBoundingInfo().boundingBox.maximumWorld.x);
                //console.log("y="+pickInfo.pickedMesh.getBoundingInfo().boundingBox.maximumWorld.y);
                //console.log("z="+pickInfo.pickedMesh.getBoundingInfo().boundingBox.maximumWorld.z);
            }
        }
    }    

            HF_Top.actionManager.registerAction(new BABYLON.ExecuteCodeAction(
                { trigger: BABYLON.ActionManager.OnPickDownTrigger },
                function() {
                    if (HF_Top.rotation.x==0)
            {
                BABYLON.Animation.CreateAndStartAnimation("HF_Top_Open", HF_Top, "rotation.x", 30, 60, Door_Closed, -HF_Top_Hinge, BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT);
                BABYLON.Animation.CreateAndStartAnimation("HF_Bot_Open", HF_Bot, "rotation.x", 30, 60, Door_Closed, HF_Bot_Hinge, BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT);
            }
            else
            {
                BABYLON.Animation.CreateAndStartAnimation("HF_Top_Close", HF_Top, "rotation.x", 30, 60, -HF_Top_Hinge, Door_Closed, BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT);
                BABYLON.Animation.CreateAndStartAnimation("HF_Bot_Close", HF_Bot, "rotation.x", 30, 60, HF_Bot_Hinge, Door_Closed, BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT);
            }
                }));
       




////
    var makeTextPlane = function(text, color, size) {
    	var dynamicTexture = new BABYLON.DynamicTexture("DynamicTexture", 50, scene, true);
    	dynamicTexture.hasAlpha = true;
    	dynamicTexture.drawText(text, 5, 40, "bold 36px Arial", color , "transparent", true);
    	var plane = new BABYLON.Mesh.CreatePlane("TextPlane", size, scene, true);
    	plane.material = new BABYLON.StandardMaterial("TextPlaneMaterial", scene);
    	plane.material.backFaceCulling = false;
    	plane.material.specularColor = new BABYLON.Color3(0, 0, 0);
    	plane.material.diffuseTexture = dynamicTexture;
    	return plane;
    };

// show axis
  	var showAxis = function(size) {

  
    	var axisX = BABYLON.Mesh.CreateLines("axisX", [ 
      		new BABYLON.Vector3.Zero(), new BABYLON.Vector3(size, 0, 0), new BABYLON.Vector3(size * 0.95, 0.05 * size, 0), 
      		new BABYLON.Vector3(size, 0, 0), new BABYLON.Vector3(size * 0.95, -0.05 * size, 0)
      	], scene);
    	axisX.color = new BABYLON.Color3(1, 0, 0);
    	var xChar = makeTextPlane("X", "red", size / 10);
    	xChar.position = new BABYLON.Vector3(0.9 * size, -0.05 * size, 0);
    	var axisY = BABYLON.Mesh.CreateLines("axisY", [
        	new BABYLON.Vector3.Zero(), new BABYLON.Vector3(0, size, 0), new BABYLON.Vector3( -0.05 * size, size * 0.95, 0), 
        	new BABYLON.Vector3(0, size, 0), new BABYLON.Vector3( 0.05 * size, size * 0.95, 0)
        ], scene);
    	axisY.color = new BABYLON.Color3(0, 1, 0);
    	var yChar = makeTextPlane("Y", "green", size / 10);
    	yChar.position = new BABYLON.Vector3(0, 0.9 * size, -0.05 * size);
    	var axisZ = BABYLON.Mesh.CreateLines("axisZ", [
        	new BABYLON.Vector3.Zero(), new BABYLON.Vector3(0, 0, size), new BABYLON.Vector3( 0 , -0.05 * size, size * 0.95),
        	new BABYLON.Vector3(0, 0, size), new BABYLON.Vector3( 0, 0.05 * size, size * 0.95)
        ], scene);
    	axisZ.color = new BABYLON.Color3(0, 0, 1);
    	var zChar = makeTextPlane("Z", "blue", size / 10);
    	zChar.position = new BABYLON.Vector3(0, 0.05 * size, 0.9 * size);
	};
	
	showAxis(20);
    
    return scene;


};
